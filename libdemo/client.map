{"version":3,"sources":["deparam.ts","client.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,OAAA,CAAwB,KAAxB,EAAqC;AACnC,QAAI,KAAJ;AACA,QAAM,OAAO,KAAb;AACA,QAAM,SAAS,oBAAf;AACA,QAAM,SAAS,SAAT,MAAS,CAAC,CAAD,EAAU;AAAK,eAAA,mBAAmB,EAAE,OAAF,CAAU,IAAV,EAAgB,GAAhB,CAAnB,CAAA;AAAwC,KAAtE;AACA,QAAM,SAAsC,EAA5C;AAEA,WAAO,QAAQ,OAAO,IAAP,CAAY,KAAZ,CAAf,EAAmC;AACjC,eAAO,OAAO,MAAM,CAAN,CAAP,CAAP,IAA2B,OAAO,MAAM,CAAN,CAAP,CAA3B;AACD;AACD,WAAO,MAAP;AACD;AAXD,QAAA,OAAA,GAAA,OAAA;AAaA,SAAA,KAAA,CAAsB,GAAtB,EAA8B;AAC5B,QAAM,QAAQ,EAAd;AACA,SAAK,IAAM,IAAX,IAAmB,GAAnB,EAAwB;AACtB,YAAI,IAAI,cAAJ,CAAmB,IAAnB,CAAJ,EAA8B;AAC5B,kBAAM,IAAN,CAAc,mBAAmB,IAAnB,IAAwB,GAAxB,GAA4B,mBAAmB,IAAI,IAAJ,CAAnB,CAA1C;AACD;AACF;AACD,WAAO,MAAM,IAAN,CAAW,GAAX,CAAP;AACD;AARD,QAAA,KAAA,GAAA,KAAA;;;;;ACbA,IAAA,YAAA,QAAA,WAAA,CAAA;AAGA,IAAI,SAAS,SAAS,aAAT,CAAuB,sBAAvB,CAAb;AACA,IAAI,CAAC,MAAL,EAAa;AACX,UAAM,MAAM,uDAAN,CAAN;AACD;AAGD,IAAM,QAAqC,EAA3C;AACA,KAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,UAAP,CAAkB,MAAtC,EAA8C,GAA9C,EAAmD;AACjD,QAAM,YAAY,OAAO,UAAP,CAAkB,IAAlB,CAAuB,CAAvB,CAAlB;AACA,UAAM,UAAU,IAAhB,IAAwB,UAAU,KAAlC;AACD;AAGD,MAAM,GAAN,GAAY,SAAS,IAArB;AACA,MAAM,MAAN,GAAe,SAAS,MAAxB;AACA,MAAM,QAAN,GAAiB,SAAS,QAAT,CAAkB,MAAlB,CAAyB,CAAzB,EAA4B,OAA5B,CAAoC,QAApC,EAA8C,EAA9C,CAAjB;AACA,MAAM,KAAN,GAAc,SAAS,KAAvB;AACA,IAAM,kBAAkB,SAAS,aAAT,CAAuB,0BAAvB,CAAxB;AACA,MAAM,WAAN,GAAoB,kBAAkB,gBAAgB,OAAlC,GAA4C,EAAhE;AAKA,SAAS,IAAT,CAAc,kBAAd,CACE,YADF,EAEE,oSAFF;AAoBA,IAAM,MAAM,MAAM,gBAAN,IAA0B,kBAAtC;AACA,OAAO,kBAAP,CACE,UADF,EAEE,+FACyD,GADzD,GAC4D,GAD5D,GACgE,UAAA,KAAA,CAAM,KAAN,CADhE,GAC4E,wBAH9E;AAKA,IAAM,YAAY,OAAO,kBAAzB;AACA,OAAO,aAAP,CAAsB,WAAtB,CAAkC,MAAlC;AAGA,iBAAiB,SAAjB,EAA4B,UAAA,KAAA,EAAK;AAC/B,QAAM,OAAO,MAAM,IAAnB;AACA,QAAI,QAAQ,KAAK,IAAL,KAAc,QAAtB,IAAkC,KAAK,MAA3C,EAAmD;AACjD,kBAAU,KAAV,CAAgB,MAAhB,GAA4B,KAAK,MAAL,GAAW,IAAvC;AACD;AACF,CALD","file":"client.map","sourcesContent":["export function deparam(query: string): { [name: string]: string; } {\r\n  let match: RegExpExecArray | null;\r\n  const plus = /\\+/g;\r\n  const search = /([^&=]+)=?([^&]*)/g;\r\n  const decode = (s: string) => decodeURIComponent(s.replace(plus, ' '));\r\n  const params: { [name: string]: string; } = {};\r\n  // tslint:disable-next-line:no-conditional-assignment\r\n  while (match = search.exec(query)) {\r\n    params[decode(match[1])] = decode(match[2]);\r\n  }\r\n  return params;\r\n}\r\n\r\nexport function param(obj: any) {\r\n  const parts = [];\r\n  for (const name in obj) {\r\n    if (obj.hasOwnProperty(name)) {\r\n      parts.push(`${encodeURIComponent(name)}=${encodeURIComponent(obj[name])}`);\r\n    }\r\n  }\r\n  return parts.join('&');\r\n}\r\n","import { param } from './deparam';\r\nimport { ResizeMessage } from './bus';\r\n\r\nlet script = document.querySelector('#GitHubCommentScript') as HTMLScriptElement;\r\nif (!script) {\r\n  throw Error(\"GitHubCommentScript configuration element is required\");\r\n}\r\n\r\n// gather script element's attributes\r\nconst attrs: { [name: string]: string; } = {};\r\nfor (let i = 0; i < script.attributes.length; i++) {\r\n  const attribute = script.attributes.item(i);\r\n  attrs[attribute.name] = attribute.value;\r\n}\r\n\r\n// gather page attributes\r\nattrs.url = location.href;\r\nattrs.origin = location.origin;\r\nattrs.pathname = location.pathname.substr(1).replace(/\\.\\w+$/, '');\r\nattrs.title = document.title;\r\nconst descriptionMeta = document.querySelector(`meta[name='description']`) as HTMLMetaElement;\r\nattrs.description = descriptionMeta ? descriptionMeta.content : '';\r\n\r\n// create the standard utterances styles and insert them at the beginning of the\r\n// <head> for easy overriding.\r\n// NOTE: the craziness with \"width\" is for mobile safari :(\r\ndocument.head.insertAdjacentHTML(\r\n  'afterbegin',\r\n  `<style>\r\n    .utterances {\r\n      position: relative;\r\n      width: 100%;\r\n    }\r\n    .utterances-frame {\r\n      position: absolute;\r\n      left: 0;\r\n      right: 0;\r\n      width: 1px;\r\n      min-width: 100%;\r\n      max-width: 100%;\r\n      height: 100%;\r\n      border: 0;\r\n    }\r\n  </style>`);\r\n\r\n// create the comments iframe and it's responsive container\r\nconst url = attrs['resources-path'] + '/utterances.html';\r\nscript.insertAdjacentHTML(\r\n  'afterend',\r\n  `<div class=\"utterances\">\r\n    <iframe class=\"utterances-frame\" scrolling=\"no\" src=\"${url}?${param(attrs)}\"></iframe>\r\n  </div>`);\r\nconst container = script.nextElementSibling as HTMLDivElement;\r\nscript.parentElement!.removeChild(script);\r\n\r\n// adjust the iframe's height when the height of it's content changes\r\naddEventListener('message', event => {\r\n  const data = event.data as ResizeMessage;\r\n  if (data && data.type === 'resize' && data.height) {\r\n    container.style.height = `${data.height}px`;\r\n  }\r\n});\r\n"]}